import os

def create_readme(data_dir):
    # Define paths for data subfolders
    raw_data_path = os.path.join(data_dir, 'raw')
    processed_data_path = os.path.join(data_dir, 'processed')
    synthetic_data_path = os.path.join(data_dir, 'synthetic')

    # Get list of files in each directory
    raw_files = os.listdir(raw_data_path)
    processed_files = os.listdir(processed_data_path)
    synthetic_files = os.listdir(synthetic_data_path)

    # Generate README content
    readme_content = f"""
# Industrial Process Simulation - Data

This project simulates industrial processes using Generative AI. Below is the overview of the datasets used in this project.

## Raw Data

The raw data contains the original IoT sensor readings. These files are untouched and represent real-time data from various industrial machines.

- **Location**: `{raw_data_path}`
- **Files**: {', '.join(raw_files)}

## Processed Data

The processed data is cleaned, preprocessed, and ready for use in training and testing the generative AI model. This data is normalized, standardized, and converted into PyTorch tensors for efficient usage.

- **Location**: `{processed_data_path}`
- **Files**: {', '.join(processed_files)}

### Preprocessing Steps:
- Data normalization using MinMaxScaler/StandardScaler.
- Missing value imputation (if applicable).
- Transformation into tensors suitable for training.

## Synthetic Data

Synthetic data is generated using a Generative Adversarial Network (GAN) to simulate industrial process conditions. This data helps in augmenting training datasets and testing models in controlled environments.

- **Location**: `{synthetic_data_path}`
- **Files**: {', '.join(synthetic_files)}

### Generation Conditions:
- The data is generated by a trained GAN model, which simulates various sensor readings.
- The synthetic data is intended for testing predictive maintenance and anomaly detection systems.

## Conclusion

The datasets provided serve as the foundation for training and testing the generative models for industrial process simulations. Ensure that the raw data is maintained securely and that preprocessing steps are applied consistently before using the processed data.

    """
    
    # Write to README.md
    with open(os.path.join(data_dir, 'README.md'), 'w') as readme_file:
        readme_file.write(readme_content.strip())

    print(f"README.md generated in {data_dir}/README.md")

# Set your project data directory path
data_directory = './data'  # Change this to your actual data directory
create_readme(data_directory)
